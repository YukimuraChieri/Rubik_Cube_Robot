// Generated by gencpp from file central_proc/CubeSolveExecFeedback.msg
// DO NOT EDIT!


#ifndef CENTRAL_PROC_MESSAGE_CUBESOLVEEXECFEEDBACK_H
#define CENTRAL_PROC_MESSAGE_CUBESOLVEEXECFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace central_proc
{
template <class ContainerAllocator>
struct CubeSolveExecFeedback_
{
  typedef CubeSolveExecFeedback_<ContainerAllocator> Type;

  CubeSolveExecFeedback_()
    : now_cmd()  {
    }
  CubeSolveExecFeedback_(const ContainerAllocator& _alloc)
    : now_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _now_cmd_type;
  _now_cmd_type now_cmd;





  typedef boost::shared_ptr< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct CubeSolveExecFeedback_

typedef ::central_proc::CubeSolveExecFeedback_<std::allocator<void> > CubeSolveExecFeedback;

typedef boost::shared_ptr< ::central_proc::CubeSolveExecFeedback > CubeSolveExecFeedbackPtr;
typedef boost::shared_ptr< ::central_proc::CubeSolveExecFeedback const> CubeSolveExecFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator1> & lhs, const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.now_cmd == rhs.now_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator1> & lhs, const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace central_proc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e4a40387680c99bba0920b8846eec59";
  }

  static const char* value(const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e4a40387680c99bULL;
  static const uint64_t static_value2 = 0xba0920b8846eec59ULL;
};

template<class ContainerAllocator>
struct DataType< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "central_proc/CubeSolveExecFeedback";
  }

  static const char* value(const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"# 定义周期反馈的信息\n"
"string now_cmd\n"
"\n"
;
  }

  static const char* value(const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.now_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CubeSolveExecFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::central_proc::CubeSolveExecFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::central_proc::CubeSolveExecFeedback_<ContainerAllocator>& v)
  {
    s << indent << "now_cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.now_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTRAL_PROC_MESSAGE_CUBESOLVEEXECFEEDBACK_H
