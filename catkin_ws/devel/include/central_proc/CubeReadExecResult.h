// Generated by gencpp from file central_proc/CubeReadExecResult.msg
// DO NOT EDIT!


#ifndef CENTRAL_PROC_MESSAGE_CUBEREADEXECRESULT_H
#define CENTRAL_PROC_MESSAGE_CUBEREADEXECRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace central_proc
{
template <class ContainerAllocator>
struct CubeReadExecResult_
{
  typedef CubeReadExecResult_<ContainerAllocator> Type;

  CubeReadExecResult_()
    : six_faces_str()
    , hand_axis()  {
    }
  CubeReadExecResult_(const ContainerAllocator& _alloc)
    : six_faces_str(_alloc)
    , hand_axis(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _six_faces_str_type;
  _six_faces_str_type six_faces_str;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hand_axis_type;
  _hand_axis_type hand_axis;





  typedef boost::shared_ptr< ::central_proc::CubeReadExecResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::central_proc::CubeReadExecResult_<ContainerAllocator> const> ConstPtr;

}; // struct CubeReadExecResult_

typedef ::central_proc::CubeReadExecResult_<std::allocator<void> > CubeReadExecResult;

typedef boost::shared_ptr< ::central_proc::CubeReadExecResult > CubeReadExecResultPtr;
typedef boost::shared_ptr< ::central_proc::CubeReadExecResult const> CubeReadExecResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::central_proc::CubeReadExecResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::central_proc::CubeReadExecResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::central_proc::CubeReadExecResult_<ContainerAllocator1> & lhs, const ::central_proc::CubeReadExecResult_<ContainerAllocator2> & rhs)
{
  return lhs.six_faces_str == rhs.six_faces_str &&
    lhs.hand_axis == rhs.hand_axis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::central_proc::CubeReadExecResult_<ContainerAllocator1> & lhs, const ::central_proc::CubeReadExecResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace central_proc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::central_proc::CubeReadExecResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::central_proc::CubeReadExecResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::central_proc::CubeReadExecResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "134c9d0d676cc6167f6852a290879bdd";
  }

  static const char* value(const ::central_proc::CubeReadExecResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x134c9d0d676cc616ULL;
  static const uint64_t static_value2 = 0x7f6852a290879bddULL;
};

template<class ContainerAllocator>
struct DataType< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "central_proc/CubeReadExecResult";
  }

  static const char* value(const ::central_proc::CubeReadExecResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"# 定义结果信息\n"
"string six_faces_str\n"
"string hand_axis\n"
;
  }

  static const char* value(const ::central_proc::CubeReadExecResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.six_faces_str);
      stream.next(m.hand_axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CubeReadExecResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::central_proc::CubeReadExecResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::central_proc::CubeReadExecResult_<ContainerAllocator>& v)
  {
    s << indent << "six_faces_str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.six_faces_str);
    s << indent << "hand_axis: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hand_axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTRAL_PROC_MESSAGE_CUBEREADEXECRESULT_H
