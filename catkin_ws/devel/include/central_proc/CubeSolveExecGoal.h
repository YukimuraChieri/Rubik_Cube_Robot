// Generated by gencpp from file central_proc/CubeSolveExecGoal.msg
// DO NOT EDIT!


#ifndef CENTRAL_PROC_MESSAGE_CUBESOLVEEXECGOAL_H
#define CENTRAL_PROC_MESSAGE_CUBESOLVEEXECGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace central_proc
{
template <class ContainerAllocator>
struct CubeSolveExecGoal_
{
  typedef CubeSolveExecGoal_<ContainerAllocator> Type;

  CubeSolveExecGoal_()
    : cmd_list()  {
    }
  CubeSolveExecGoal_(const ContainerAllocator& _alloc)
    : cmd_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_list_type;
  _cmd_list_type cmd_list;





  typedef boost::shared_ptr< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CubeSolveExecGoal_

typedef ::central_proc::CubeSolveExecGoal_<std::allocator<void> > CubeSolveExecGoal;

typedef boost::shared_ptr< ::central_proc::CubeSolveExecGoal > CubeSolveExecGoalPtr;
typedef boost::shared_ptr< ::central_proc::CubeSolveExecGoal const> CubeSolveExecGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::central_proc::CubeSolveExecGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::central_proc::CubeSolveExecGoal_<ContainerAllocator1> & lhs, const ::central_proc::CubeSolveExecGoal_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_list == rhs.cmd_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::central_proc::CubeSolveExecGoal_<ContainerAllocator1> & lhs, const ::central_proc::CubeSolveExecGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace central_proc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1c785ab2e1e6a0b11bd87ebff35a4c4";
  }

  static const char* value(const ::central_proc::CubeSolveExecGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1c785ab2e1e6a0bULL;
  static const uint64_t static_value2 = 0x11bd87ebff35a4c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "central_proc/CubeSolveExecGoal";
  }

  static const char* value(const ::central_proc::CubeSolveExecGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"# 定义目标信息\n"
"string cmd_list\n"
;
  }

  static const char* value(const ::central_proc::CubeSolveExecGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CubeSolveExecGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::central_proc::CubeSolveExecGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::central_proc::CubeSolveExecGoal_<ContainerAllocator>& v)
  {
    s << indent << "cmd_list: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTRAL_PROC_MESSAGE_CUBESOLVEEXECGOAL_H
