// Generated by gencpp from file kociemba_solve/RandomSolveRequest.msg
// DO NOT EDIT!


#ifndef KOCIEMBA_SOLVE_MESSAGE_RANDOMSOLVEREQUEST_H
#define KOCIEMBA_SOLVE_MESSAGE_RANDOMSOLVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kociemba_solve
{
template <class ContainerAllocator>
struct RandomSolveRequest_
{
  typedef RandomSolveRequest_<ContainerAllocator> Type;

  RandomSolveRequest_()
    : step_num(0)  {
    }
  RandomSolveRequest_(const ContainerAllocator& _alloc)
    : step_num(0)  {
  (void)_alloc;
    }



   typedef int16_t _step_num_type;
  _step_num_type step_num;





  typedef boost::shared_ptr< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RandomSolveRequest_

typedef ::kociemba_solve::RandomSolveRequest_<std::allocator<void> > RandomSolveRequest;

typedef boost::shared_ptr< ::kociemba_solve::RandomSolveRequest > RandomSolveRequestPtr;
typedef boost::shared_ptr< ::kociemba_solve::RandomSolveRequest const> RandomSolveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator1> & lhs, const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.step_num == rhs.step_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator1> & lhs, const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kociemba_solve

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2f706fe36a6478a8fe63c803973d9a5";
  }

  static const char* value(const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2f706fe36a6478aULL;
  static const uint64_t static_value2 = 0x8fe63c803973d9a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kociemba_solve/RandomSolveRequest";
  }

  static const char* value(const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 step_num\n"
;
  }

  static const char* value(const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RandomSolveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kociemba_solve::RandomSolveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kociemba_solve::RandomSolveRequest_<ContainerAllocator>& v)
  {
    s << indent << "step_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.step_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KOCIEMBA_SOLVE_MESSAGE_RANDOMSOLVEREQUEST_H
