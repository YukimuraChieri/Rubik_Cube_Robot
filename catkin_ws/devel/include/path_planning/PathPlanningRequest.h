// Generated by gencpp from file path_planning/PathPlanningRequest.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_MESSAGE_PATHPLANNINGREQUEST_H
#define PATH_PLANNING_MESSAGE_PATHPLANNINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planning
{
template <class ContainerAllocator>
struct PathPlanningRequest_
{
  typedef PathPlanningRequest_<ContainerAllocator> Type;

  PathPlanningRequest_()
    : solve_str()
    , hand_axis()  {
    }
  PathPlanningRequest_(const ContainerAllocator& _alloc)
    : solve_str(_alloc)
    , hand_axis(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _solve_str_type;
  _solve_str_type solve_str;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hand_axis_type;
  _hand_axis_type hand_axis;





  typedef boost::shared_ptr< ::path_planning::PathPlanningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning::PathPlanningRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PathPlanningRequest_

typedef ::path_planning::PathPlanningRequest_<std::allocator<void> > PathPlanningRequest;

typedef boost::shared_ptr< ::path_planning::PathPlanningRequest > PathPlanningRequestPtr;
typedef boost::shared_ptr< ::path_planning::PathPlanningRequest const> PathPlanningRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning::PathPlanningRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning::PathPlanningRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_planning::PathPlanningRequest_<ContainerAllocator1> & lhs, const ::path_planning::PathPlanningRequest_<ContainerAllocator2> & rhs)
{
  return lhs.solve_str == rhs.solve_str &&
    lhs.hand_axis == rhs.hand_axis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_planning::PathPlanningRequest_<ContainerAllocator1> & lhs, const ::path_planning::PathPlanningRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning::PathPlanningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning::PathPlanningRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning::PathPlanningRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af5709462db5b1aa4cc8f6fe93e80af6";
  }

  static const char* value(const ::path_planning::PathPlanningRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf5709462db5b1aaULL;
  static const uint64_t static_value2 = 0x4cc8f6fe93e80af6ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning/PathPlanningRequest";
  }

  static const char* value(const ::path_planning::PathPlanningRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string solve_str\n"
"string hand_axis\n"
;
  }

  static const char* value(const ::path_planning::PathPlanningRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.solve_str);
      stream.next(m.hand_axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPlanningRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning::PathPlanningRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning::PathPlanningRequest_<ContainerAllocator>& v)
  {
    s << indent << "solve_str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.solve_str);
    s << indent << "hand_axis: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hand_axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_MESSAGE_PATHPLANNINGREQUEST_H
